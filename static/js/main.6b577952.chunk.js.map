{"version":3,"sources":["Cat/Cat.module.css","Cat/Cat.js","hos/withClass.js","hos/Auxiliary.js","Extra/Extra.js","Counter2/Counter2.js","Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withClass","Component","className","props","inputClasses","classes","input","this","name","push","green","red","length","bold","Fragment","born","children","type","onChange","onChangeName","value","join","onClick","onDelete","React","Cat","Auxiliary","ClickedContext","createContext","Extra","state","clicked","setState","console","log","style","width","margin","border","handleInput","Provider","onClicked","toggleClickedHandler","Consumer","Counter","counter","addCounter","resetCounter","styles","Btn_rotateIn","animation","animationName","Radium","keyframes","rotateIn","Counter2","App","cats","pageTitle","showCats","showExtra","newcat","toggleCatsHandler","toggleExtraHandler","event","handleInputAdd","target","addHandler","index","cat","concat","splice","h1","bounce","map","key","deleteHandler","extra","defaultValue","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b577952.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cat\":\"Cat_Cat__1CRaT\",\"input\":\"Cat_input__1Q5ZE\",\"green\":\"Cat_green__CXeBQ\",\"red\":\"Cat_red__1v_S1\",\"bold\":\"Cat_bold__1vHDK\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Cat.module.css';\nimport withClass from '../hos/withClass';\n\nclass Cat extends React.Component {\n\n    render() {\n                // componentDidMount() {\n        //     this.inputRef.focus\n        // }\n\n        const inputClasses = [classes.input]\n\n        if (this.props.name) {\n            inputClasses.push(classes.green)\n        } else {\n            inputClasses.push(classes.red)\n        }\n\n        if (this.props.name.length > 4) {\n            inputClasses.push(classes.bold)\n        }\n\n        return (\n            <React.Fragment>\n                    <h3>Cat name: {this.props.name}</h3>\n                    <p>Born in: {this.props.born}</p>\n                    {this.props.children}\n                    <input\n\n                        type=\"text\"\n                        onChange={this.props.onChangeName}\n                        value={this.props.name}\n                        className={inputClasses.join(' ')}\n                        //className=\"input green bold red\"\n                    />\n                    <button onClick={this.props.onDelete}>Delete</button>\n            </React.Fragment>\n        )\n    }\n}\n\nCat.propTypes={\n    name: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    onChangeName: PropTypes.func,\n    onDelete: PropTypes.func,\n};\n\nexport default withClass(Cat, classes.Cat)","import React from 'react';\n\nconst withClass=(Component, className)=>{\n    return(props)=>{\n        return (\n            <div className={className}>\n                <Component {...props}/>\n            </div>\n        )\n    }\n}\n\nexport default withClass","// import React from 'react';\n\nconst Auxiliary=(props)=>{\n    return props.children\n}\n\nexport default Auxiliary","import React from \"react\";\nimport Counter from \"../Counter/Counter\";\n\nexport const ClickedContext = React.createContext(false)\n\nclass Extra extends React.Component {\n    state = {\n        clicked: this.props.clicked\n    };\n\n    componentDidUpdate() {\n        if (this.state.clicked !== this.props.clicked) {\n            this.setState({\n                clicked: this.props.clicked,\n            });\n        }\n    }\n\n    render() {\n        console.log('extra: ' + this.state.clicked)\n        return (\n            <div style={{\n                width: 'auto',\n                margin: '0 auto',\n                border: '1px solid #ccc'\n            }}>\n                <h2>Extra utils</h2>\n                <h3>Change page title (try to hover)</h3>\n                <input type=\"text\" onChange={this.props.handleInput}/>\n\n                <ClickedContext.Provider value={this.state.clicked}>\n                    <Counter\n                        // clicked={this.props.clicked}\n                        onClicked={this.props.toggleClickedHandler}\n                    />\n                </ClickedContext.Provider>\n\n            </div>\n        )\n    }\n}\n\nexport default Extra;","import React, {Component} from 'react';\nimport {ClickedContext} from '../Extra/Extra'\n\nexport default props => {\n    // console.log('Counter2: ' + props.clicked)\n\n        return (\n            <div style={{\n                width: '200px',\n                margin: '0 auto'\n            }}>\n                <ClickedContext.Consumer>\n                    {/*{console.log(this.props.clicked)}*/}\n                    {/*{clicked => this.props.clicked ? <p>Reset</p> : null}*/}\n                    {clicked => clicked ? <p>Reset</p> : null}\n                </ClickedContext.Consumer>\n            </div>\n        )\n    }","import React, {Component} from 'react';\nimport Radium from \"radium\";\nimport Auxiliary from '../hos/Auxiliary'\nimport Counter2 from '../Counter2/Counter2'\nimport {rotateIn} from \"react-animations\";\n\n\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    addCounter = () => {\n        this.setState({\n            counter: this.state.counter + 1\n        })\n    };\n\n    resetCounter = () => {\n        this.setState({\n            counter: 0\n        })\n    };\n\n    render() {\n        const styles = {\n            Btn_rotateIn: {\n                ':active': {\n                    animation: '5 0.1s',\n                    animationName: Radium.keyframes(rotateIn, 'rotateIn'),\n                }\n            },\n        }\n\n        return (\n            <Auxiliary>  {/*Аналогично <Rect.Fragment>, но нужно создавать отдельный файл*/}\n                <h2>Counter {this.state.counter}</h2>\n                <Counter2\n                    // clicked={this.props.clicked}\n                ></Counter2>\n                <div>\n                    <button className=\"Btn_counter\" onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\n                    <button className=\"Btn\" style={styles.Btn_rotateIn} onClick={this.resetCounter} /*onClick={this.props.onClicked}*/ >\n                        Reset counter\n                    </button>\n                    <button className=\"Btn_counter\" onClick={this.addCounter}>+</button>\n\n                </div>\n            </Auxiliary>\n        )\n    }\n\n}\n\nexport default Radium(Counter);","import React, {Component} from 'react';\nimport './App.css';\nimport Cat from './Cat/Cat.js';\nimport Counter from './Counter/Counter.js';\nimport Radium from \"radium\";\nimport {bounce} from 'react-animations';\nimport Extra from './Extra/Extra';\n\n\n\nclass App extends Component {\n\n    state = {\n        clicked: false,\n        cats: [\n            {name: 'Барсик', born: 2018},\n            {name: 'Рыжик', born: 2016}\n        ],\n        pageTitle: 'The cats app',\n        showCats: false,\n        showExtra: false,\n        newcat: {name: 'Your cat name', born: 2020}\n    };\n\n    toggleCatsHandler = () => {\n        this.setState({\n            showCats: !this.state.showCats\n        })\n    };\n\n    toggleExtraHandler=()=>{\n        this.setState({\n            showExtra: !this.state.showExtra\n        })\n    };\n\n    toggleClickedHandler = () => {\n        this.setState({\n            clicked: !this.state.clicked\n        });\n        console.log('app: ' + this.state.clicked)\n    };\n\n    handleInput = (event) => {\n        this.setState({\n            pageTitle: event  //Нужно разобраться почему работает такая запись, а не event.target.value\n        })\n        console.log(this.state.pageTitle)\n    };\n\n    onChangeName(name, index) {\n        console.log(name, index)\n        const cat = this.state.cats[index]\n        cat.name = name\n        const cats = [...this.state.cats]  //Создание клона массива, так как напрямую его нельзя менять\n        cats[index] = cat\n        this.setState({\n            cats //cats: cats (Эквивалентная запись)\n        })\n    }\n\n    deleteHandler(index) {\n        const cats = this.state.cats.concat() // Копия массива\n        cats.splice(index, 1)\n        this.setState({cats})\n    }\n\n    handleInputAdd = event => {\n        this.setState({\n            newcat: {name: event.target.value, born: 2020}\n        })\n    }\n\n    addHandler = () => {\n        this.setState(({cats, newcat}) => ({\n                cats: [\n                    ...cats,\n                    newcat\n                ],\n                newcat: {name: 'Your cat name', born: 2020}\n            })\n        )\n    }\n\n\n    render() {\n        const styles = {\n            h1: {\n                ':hover': {\n                    animation: '5 1s',\n                    animationName: Radium.keyframes(bounce, 'bounce'),\n                }\n            },\n        }\n\n\n        let cats = null\n        if (this.state.showCats) {\n            cats = this.state.cats.map((cat, index) => {\n                return (\n                    <Cat\n                        key={index}\n                        name={cat.name}\n                        born={cat.born}\n                        onChangeName={event => this.onChangeName(event.target.value, index)}\n                        onDelete={event => this.deleteHandler(event.target.value, index)}\n                    />\n                )\n            })\n        }\n\n        let extra = null\n        if (this.state.showExtra) {\n            extra = <Extra\n                clicked={this.state.clicked}\n                handleInput={event => this.handleInput(event.target.value)}\n                toggleClickedHandler={event => this.toggleClickedHandler()}\n            />\n        }\n\n\n        return (\n            <div className='App'>\n                <h1 className=\"h1\" style={styles.h1}>{this.state.pageTitle}</h1>\n                <button className=\"Btn\" onClick={this.toggleExtraHandler}>\n                    Show Extras\n                </button>\n                <br/>\n                {extra}\n                {/*<Extra*/}\n                {/*    clicked={this.state.clicked}*/}\n                {/*    handleInput={event => this.handleInput(event.target.value)}*/}\n                {/*    toggleClickedHandler={event => this.toggleClickedHandler()}*/}\n                {/*/>*/}\n\n                <button className=\"Btn\" onClick={this.toggleCatsHandler}>\n                    Show All Cats!\n                </button>\n\n                <br/>\n                <input\n                    type=\"text\"\n                    onChange={this.handleInputAdd}\n                    defaultValue='Your cat name'\n                />\n                <button className=\"Btn\" onClick={this.addHandler}>Add new cat</button>\n\n                <div style={{\n                    width: 400,\n                    margin: 'auto',\n                    paddingTop: 20,\n                }}>\n                    {cats}\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StyleRoot} from \"radium\";\n\nReactDOM.render(<StyleRoot><App title={'I am from props!'}/></StyleRoot>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}