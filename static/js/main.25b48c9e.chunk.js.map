{"version":3,"sources":["Cat/Cat.js","Cat/Add.js","App.js","serviceWorker.js","index.js"],"names":["Radium","props","inputClasses","name","push","length","className","style","border","boxShadow","cursor","born","children","type","onChange","onChangeName","value","join","onClick","onDelete","handleInputAdd","onKeyPress","onAdd","App","state","cats","pageTitle","showCats","newcat","toggleCatsHandler","setState","handleInput","event","target","console","log","addHandler","index","cat","this","concat","splice","styles","h1","animation","animationName","keyframes","bounce","map","key","deleteHandler","defaultValue","width","margin","paddingTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25b48c9e.chunk.js","sourcesContent":["import React from 'react';\nimport Radium from \"radium\";\nimport './Cat.css'\n\nconst Cat = props => {\n    const inputClasses = ['input']\n\n    const style = {\n        border: '1px solid #ccc',\n        boxShadow: '0 4px 5px 0 rgba(0,0,0, .14)',\n        ':hover': {\n            border: '1px solid #aaa',\n            boxShadow: '0 4px 15px 0 rgba(0,0,0, .25)',\n            cursor: 'pointer'\n        }\n    }\n\n    if (props.name) {\n        inputClasses.push('green')\n    } else {\n        inputClasses.push('red')\n    }\n\n    if (props.name.length>4){\n        inputClasses.push('bold')\n    }\n\n    return (\n        <div className=\"Cat\" style={style}>\n            <h3>Cat name: {props.name}</h3>\n            <p>Born in: {props.born}</p>\n            {props.children}\n            <input\n                type=\"text\"\n                onChange={props.onChangeName}\n                value={props.name}\n                className={inputClasses.join(' ')}\n                //className=\"input green bold red\"\n            />\n            <button onClick={props.onDelete}>Delete</button>\n        </div>\n    )\n}\n\nexport default Radium(Cat)","import React from 'react';\nimport Radium from \"radium\";\nimport './Cat.css'\n\nconst Cat = props => {\n    const inputClasses = ['input']\n\n    const style = {\n        border: '1px solid #ccc',\n        ':hover': {\n            border: '1px solid #aaa',\n            boxShadow: '0 4px 15px 0 rgba(0,0,0, .25)',\n            cursor: 'pointer'\n        }\n    }\n\n\n    return (\n        <div className=\"Cat\" style={style}>\n            <h2>Add a cat</h2>\n            <h3>Cat name: {props.name}</h3>\n            <p>Born in: {props.born}</p>\n            <input\n                type=\"text\"\n                onChange={props.handleInputAdd}\n                onKeyPress={props.handleInputAdd}\n                value={'asd123'}\n                className={inputClasses.join(' ')}\n            />\n            <button onClick={props.onAdd}>Add</button>\n        </div>\n    )\n}\n\nexport default Radium(Cat)","import React, {Component} from 'react';\nimport './App.css';\nimport Cat from './Cat/Cat.js';\nimport Add from './Cat/Add.js';\nimport index from \"radium/es/plugins\";\nimport Radium, {StyleRoot} from \"radium\";\nimport {bounce} from 'react-animations';\n\nclass App extends Component {\n\n    state = {\n        cats: [\n            {name: 'Барсик', born: '2018'},\n            {name: 'Рыжик', born: '2016'}\n        ],\n        pageTitle: 'The cats app',\n        showCats: false,\n        newcat: {name: 'Your cat name', born: '2020'}\n    };\n\n    toggleCatsHandler=()=>{\n        this.setState({\n            showCats: !this.state.showCats\n        })\n    };\n\n    handleInput=(event)=>{\n        this.setState({\n            pageTitle: event.target.value\n        })\n        console.log(this.state.pageTitle)\n    };\n\n    onChangeName(name, index){\n        console.log(name, index)\n        const cat=this.state.cats[index]\n        cat.name=name\n        const cats = [...this.state.cats]  //Создание клона массива, так как напрямую его нельзя менять\n        cats[index] = cat\n        this.setState({cats //cats: cats (Эквивалентная запись)\n        })\n    }\n\n    deleteHandler(index){\n        const cats=this.state.cats.concat() // Копия массива\n        cats.splice(index, 1)\n        this.setState({cats})\n    }\n\n    handleInputAdd=event=> {\n        this.setState({\n            newcat: {name: event.target.value, born: '2020'}\n        })\n        // console.log('newcat')\n    }\n\n    addHandler=()=>{\n        this.setState( ({cats,newcat}) => ({\n                cats: [\n                    ...cats,\n                    newcat\n                ],\n                newcat: {name: 'Your cat name', born: '2020'}\n            })\n        )\n        // console.log(this.state.newcat)\n    }\n\n\n\n    render() {\n        const styles = {\n            h1: {\n             ':hover': {\n                 animation: 'x 1s',\n                 animationName: Radium.keyframes(bounce, 'bounce'),\n             }\n            },\n        }\n\n\n        let cats = null\n        if (this.state.showCats) {\n            cats = this.state.cats.map((cat, index)=>{\n                return (\n                    <Cat\n                        key={index}\n                        name={cat.name}\n                        born={cat.born}\n                        onChangeName={event=>this.onChangeName(event.target.value, index)}\n                        onDelete={event=>this.deleteHandler(event.target.value, index)}\n                    />\n                )\n            })\n        }\n\n        return (\n            <div className='App'>\n                <h1 className=\"h1\" style={styles.h1}>{this.state.pageTitle}</h1>\n                {/*<h1>{this.props.title}</h1>*/}\n                <h3>Change Page Title</h3>\n                <input type=\"text\" onChange={this.handleInput}/>\n                <br/><br/>\n\n                <button className=\"Btn\" onClick={this.toggleCatsHandler}>\n                    Show All Cats!\n                </button>\n\n                <br/>\n                <input\n                    type=\"text\"\n                    onChange={this.handleInputAdd}\n                    defaultValue='Your cat name'\n                />\n                <button className=\"Btn\" onClick={this.addHandler}>Add</button>\n\n                <div style={{\n                    width: 400,\n                    margin: 'auto',\n                    paddingTop: 20,\n                }}>\n                    {cats}\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StyleRoot} from \"radium\";\n\nReactDOM.render(<StyleRoot><App title={'I am from props!'}/></StyleRoot>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}